#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/mobility-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/ipv4-address-helper.h"
#include "ns3/netanim-module.h"
#include <crypto++/sha.h>

using namespace ns3;
using namespace CryptoPP;

struct Block {
	uint32_t blockNo;
	std::string data;
	std::string hash;
};

class BlockchainNode : public Object {
public:
	BlockchainNode(uint32_t nodeId, Ipv4Address ipAddress, std::vector<BlockchainNode*>& allNodes);
	void BroadcastBlockchain();
	void CreateBlock(uint32_t sender, uint32_t receiver, double amount);
	void PrintBlockchain();

private:
	uint32_t nodeId;
	Ipv4Address ipAddress;
	std::vector<Block> blockchain;
	std::vector<BlockchainNode*>& allNodes;

	std::string CalculateHash(const std::string& data);
};

BlockchainNode::BlockchainNode(uint32_t nodeId, Ipv4Address ipAddress, std::vector<BlockchainNode*>& allNodes)
	: nodeId(nodeId), ipAddress(ipAddress), allNodes(allNodes) {
	// Initialize the node with a genesis block
	Block genesisBlock = {0, "Genesis Block", "0"};
	blockchain.push_back(genesisBlock);
}

void BlockchainNode::BroadcastBlockchain() {
	// Implement broadcasting logic to all other nodes
	for (auto& node : allNodes) {
    	if (node != this) {
        	// Create a new packet with the blockchain data
        	Ptr<Packet> packet = Create<Packet>((uint8_t*)blockchain.data(), blockchain.size() * sizeof(Block));

        	// Setup a UDP socket for communication
        	Ptr<Socket> socket = Socket::CreateSocket(GetNode(), TypeId::LookupByName("ns3::UdpSocketFactory"));
        	socket->Connect(InetSocketAddress(node->ipAddress, 8080));

        	// Send the packet to the destination node
        	socket->Send(packet);
    	}
	}
}

void BlockchainNode::CreateBlock(uint32_t sender, uint32_t receiver, double amount) {
	// Create a new block based on the transaction information
	Block newBlock;
	newBlock.blockNo = blockchain.back().blockNo + 1;
	newBlock.data = "Sender: " + std::to_string(sender) + ", Receiver: " + std::to_string(receiver) + ", Amount: " + std::to_string(amount);
	newBlock.hash = CalculateHash(newBlock.data);

	// Add the new block to the blockchain
	blockchain.push_back(newBlock);

	// Broadcast the updated blockchain to all other nodes
	BroadcastBlockchain();
}

void BlockchainNode::PrintBlockchain() {
	// Print the blockchain for the current node
	std::cout << "Blockchain for Node " << nodeId << ":\n";
	for (const auto& block : blockchain) {
    	std::cout << "Block " << block.blockNo << ": Hash=" << block.hash << ", Data=" << block.data << "\n";
	}
	std::cout << "\n";
}

std::string BlockchainNode::CalculateHash(const std::string& data) {
	// Use SHA-256 for hash calculation
	SHA256 sha256;
	byte hash[CryptoPP::SHA256::DIGESTSIZE];
	sha256.CalculateDigest(hash, (const byte*)data.c_str(), data.length());

	// Convert the hash to a hexadecimal string
	std::ostringstream oss;
	for (size_t i = 0; i < CryptoPP::SHA256::DIGESTSIZE; ++i) {
    	oss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
	}
	return oss.str();
}

int main() {
	// Create a simple point-to-point network
	NodeContainer nodes;
	nodes.Create(6);
           
           	FlowMonitorHelper flowmon;
	Ptr<FlowMonitor> monitor = flowmon.InstallAll();

	PointToPointHelper pointToPoint;
	pointToPoint.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
	pointToPoint.SetChannelAttribute("Delay", StringValue("2ms"));

	NetDeviceContainer devices;
	devices = pointToPoint.Install(nodes);

	InternetStackHelper stack;
	stack.Install(nodes);

	Ipv4AddressHelper address;
	address.SetBase("10.1.1.0", "255.255.255.0");
	Ipv4InterfaceContainer interfaces = address.Assign(devices);

	// Mobility setup
	MobilityHelper mobility;
	Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator>();
	for (uint32_t i = 0; i < nodes.GetN(); ++i) {
    	positionAlloc->Add(Vector(i * 5, 0, 0));
	}
	mobility.SetPositionAllocator(positionAlloc);
	mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
	mobility.Install(nodes);

	// Create Blockchain nodes
	std::vector<BlockchainNode*> blockchainNodes;
	for (uint32_t i = 0; i < 6; ++i) {
    	blockchainNodes.push_back(new BlockchainNode(i + 1, interfaces.GetAddress(i), blockchainNodes));
	}

	// Simulate transactions for each node
	for (uint32_t sender = 1; sender <= 6; ++sender) {
    	for (uint32_t receiver = 1; receiver <= 6; ++receiver) {
        	if (sender != receiver) {
            	double amount = 5.0; // Set the transaction amount as needed
            	blockchainNodes[sender - 1]->CreateBlock(sender, receiver, amount);
        	}
    	}
	}

	// Print blockchain for each node
	for (auto& node : blockchainNodes) {
    	node->PrintBlockchain();
	}

	// Implement visualization and animation logic using NetAnim
	AnimationInterface anim("blockchain_animation.xml");
	anim.SetConstantPosition(csmaNodes.Get(0), 150, 350);
	anim.SetConstantPosition(csmaNodes.Get(1), 100, 200);
	anim.SetConstantPosition(csmaNodes.Get(2), 200,  300);
	anim.SetConstantPosition(csmaNodes.Get(3), 250, 350);
	anim.SetConstantPosition(csmaNodes.Get(4), 300, 350);
	anim.SetConstantPosition(csmaNodes.Get(5), 350, 300);

	// Run the simulation
	Simulator::Run();

            // Collect and print the throughput information
	monitor->CheckForLostPackets();
	Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier>(flowmon.GetClassifier());
	FlowMonitor::FlowStatsContainer stats = monitor->GetFlowStats();
	double totalThroughput = 0.0;

	for (auto it = stats.begin(); it != stats.end(); ++it) {
    	Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow(it->first);
    	std::cout << "\nFlow " << t.sourceAddress << " -> " << t.destinationAddress << ":\n";
    	std::cout << "  Tx Packets: " << it->second.txPackets << "\n";
    	std::cout << "  Rx Packets: " << it->second.rxPackets << "\n";
    	double throughput = it->second.rxBytes * 8.0 / (Simulator::Now().GetSeconds()) / 1e6;
    	std::cout << "  Throughput: " << throughput << " Mbps\n";
    	totalThroughput += throughput;
	}

	std::cout << "\nAverage Throughput: " << totalThroughput / stats.size() << " Mbps\n";

	Simulator::Destroy();

	// Cleanup allocated nodes
	for (auto& node : blockchainNodes) {
    	delete node;
	}
	return 0;
}
